@page "/calendario"

@using DOMINIO
@inject DAL.Contracts.IRepositoryDayEvent dayEventService

@attribute [Authorize(Policy = "Admin")]
<h3>Calendario de Eventos</h3>

<style type="text/css">
    #tblParent tbody tr td {
        width: 200px;
        height: 200px;
    }

    #divParent {
        position: relative;
    }

    #divModal {
        z-index: 10;
        position: absolute;
        border: 1px solid #000000;
        border-radius: 3px;
        background-color: #ffffff;
        left: 40%;
        top: 20%;
        width: 400px;
        min-height: 300px;
    }

    .modalHeading {
        text-align: center;
        font-size: 50px;
        text-decoration: underline;
        margin-bottom: 36px;
    }
</style>

@if (displayModal)
{
    <div id="divModal">
        <div class="container">
            <div class="panel panel-default">
                <div class="panel-heading modalHeading">Agregar Nota</div>
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-4">
                            <label>Fecha Inicio :</label>
                        </div>
                        <div class="col-md-8">
                            <input type="date" @bind-value="dayEvent.FromDate" style="width:100%;" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <label>Fecha Fin :</label>
                    </div>
                    <div class="col-md-8">
                        <input type="date" @bind-value="dayEvent.ToDate" style="width:100%;" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <label>Nota :</label>
                    </div>
                    <div class="col-md-8">
                        <input type="text" @bind-value="dayEvent.Note" placeholder="Escribir acá..." />
                    </div>
                </div>
                <div class="row" style="margin-bottom:10px;">
                    <div class="col-md-6">
                    </div>
                    <div class="col-md-6" style="text-align:right;">
                        <button class="btn btn-success" @onclick="GuardarNota" style="float:left;margin-right:5px;">Guardar</button>
                        <button class="btn btn-danger" @onclick="CloseModal" style="float:left;">Cerrar</button>

                    </div>

                </div>


            </div>

        </div>
    </div>
}

<select @onchange="LoadCalendar">
    @foreach (string monthName in monthNames)
    {
        <option>@monthName</option>
    }
</select>

<table class="table table-bordered table-striped">
    <thead>
        <tr>
            @for (var dayIndex = 0; dayIndex < days.Count(); dayIndex++)
            {
                <th>
                    @days[dayIndex]
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @for (var weekIndex = 0; weekIndex < weeks.Count(); weekIndex++)
        {
            <tr>
                @for (var dayIndex = 0; dayIndex < weeks[weekIndex].Dates.Count(); dayIndex++)
                {
                    var wIndex = weekIndex;
                    var dIndex = dayIndex;

                    <td @ondblclick="@(() => OpenModal(wIndex, dIndex))">
                        @weeks[weekIndex].Dates[dayIndex].DateValue
                        <br /><br />
                        <label style="color:crimson; font-weight:bold">
                            @weeks[weekIndex].Dates[dayIndex].Note
                        </label>
                        <br /><br />
                        
                    </td>
                }
            </tr>
        }
    </tbody>

</table>

@code {

    DayEvent dayEvent = new DayEvent()
    {
        FromDate = DateTime.Now,
        ToDate = DateTime.Now,
        Note = ""
    };

    bool displayModal = false;

    List<string> monthNames = new List<string>();
    List<string> days = new List<string>();
    List<WeekClass> weeks = new List<WeekClass>();
    DateTime startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    DateTime endDate = (new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1)).AddMonths(1).AddDays(-1);

    int selectedWeekIndex = -1;
    int selectedDayIndex = -1;

    protected override void OnInitialized()
    {
        monthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthGenitiveNames.ToList();
        GenerateCalendarHead();
        GenerateCalendarBody();
    }

    private void LoadCalendar(ChangeEventArgs e)
    {
        var month = e.Value.ToString();
        int monthIndex = DateTime.ParseExact(month, "MMMM", System.Globalization.CultureInfo.CreateSpecificCulture("es-MX")).Month;
        startDate = new DateTime(DateTime.Now.Year, monthIndex, 1);
        endDate = new DateTime(DateTime.Now.Year, monthIndex, 1).AddMonths(1).AddDays(-1);

        GenerateCalendarHead();
        GenerateCalendarBody();
    }

    private void GenerateCalendarHead()
    {
        var day1 = new List<string>();
        for(var dt = startDate; dt<=endDate;dt=dt.AddDays(1))
        {
            day1.Add(dt.ToString("dddd"));
        }
        days = day1.Distinct().ToList();
    }

    private void GenerateCalendarBody()
    {
        weeks = new List<WeekClass>();
        var dayEvents = dayEventService.GetEvents(startDate, endDate);

        int flag = 0;
        WeekClass week = new WeekClass();
        List<DayEvent> dates = new List<DayEvent>();
        var totalDays = (int)(endDate - startDate).TotalDays;
        int countDays = 0;

        for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
        {
            flag++;

            var currentObject = dayEvents.Find(x => x.EventDate.ToString("dd-MMM-yyyy") == dt.ToString("dd-MMM-yyyy"));

            dates.Add(new DayEvent()
            {
                DayEventId = currentObject == null ? 0 : currentObject.DayEventId,
                DateValue = dt.ToString("dd-MMM-yyyy"),
                DayName = dt.ToString("dddd"),
                Note = currentObject == null ? "" : currentObject.Note
            });

            if (flag==7)
            {
                week = new WeekClass();
                week.Dates = dates;
                weeks.Add(week);

                dates = new List<DayEvent>();
                flag = 0;
            }
            if(countDays == totalDays)
            {
                week = new WeekClass();
                week.Dates = dates;
                weeks.Add(week);
                break;
            }
            countDays++;
        }
    }

    private void CloseModal()
    {
        ResetModal();
    }

    private void OpenModal(int wIndex, int dIndex)
    {
        selectedWeekIndex = wIndex;
        selectedDayIndex = dIndex;

        var dayEventObj = dayEventService.GetEvent(Convert.ToDateTime(weeks[wIndex].Dates[dIndex].DateValue));
        dayEvent = dayEventObj;

        displayModal = true;
    }

    private void ResetModal()
    {
        displayModal = false;
        selectedDayIndex = -1;
        selectedWeekIndex = -1;

    }

    private void GuardarNota()
    {
        dayEvent = dayEventService.SaveOrUpdate(dayEvent);

        if(dayEvent.DayEventId > 0 )
        {
            weeks[selectedWeekIndex].Dates[selectedDayIndex].DayEventId = dayEvent.DayEventId;
            weeks[selectedWeekIndex].Dates[selectedDayIndex].Note = dayEvent.Note;

            ResetModal();
        }
    }
}



